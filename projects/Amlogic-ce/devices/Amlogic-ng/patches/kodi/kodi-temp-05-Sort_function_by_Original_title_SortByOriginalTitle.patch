From 4323ae6bdec1053748230efa27b41ceca56b8559 Mon Sep 17 00:00:00 2001
From: JimmyS83 <github.jpeter@spamgourmet.com>
Date: Tue, 16 Mar 2021 15:55:13 +0100
Subject: [PATCH] Sortybyoriginaltitle

---
 xbmc/FileItem.cpp                         |  1 +
 xbmc/SortFileItem.h                       |  4 +++-
 xbmc/filesystem/PluginDirectory.cpp       |  6 ++++++
 xbmc/interfaces/legacy/ModuleXbmcplugin.h |  2 ++
 xbmc/playlists/SmartPlayList.cpp          |  3 +++
 xbmc/utils/SortUtils.cpp                  | 23 +++++++++++++++++++++++
 xbmc/utils/SortUtils.h                    |  2 ++
 xbmc/video/GUIViewStateVideo.cpp          |  5 +++++
 xbmc/video/VideoDatabase.cpp              |  3 ++-
 xbmc/video/VideoInfoTag.cpp               | 10 ++++++++++
 10 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/xbmc/FileItem.cpp b/xbmc/FileItem.cpp
index 4f8539e304d7..5f83d668704e 100644
--- a/xbmc/FileItem.cpp
+++ b/xbmc/FileItem.cpp
@@ -2361,6 +2361,7 @@ void CFileItemList::Sort(SortDescription sortDescription)
 {
   if (sortDescription.sortBy == SortByFile ||
       sortDescription.sortBy == SortBySortTitle ||
+      sortDescription.sortBy == SortByOriginalTitle ||
       sortDescription.sortBy == SortByDateAdded ||
       sortDescription.sortBy == SortByRating ||
       sortDescription.sortBy == SortByYear ||
diff --git a/xbmc/SortFileItem.h b/xbmc/SortFileItem.h
index 158083029a01..17cdb57e9ec0 100644
--- a/xbmc/SortFileItem.h
+++ b/xbmc/SortFileItem.h
@@ -58,5 +58,7 @@ typedef enum {
   SORT_METHOD_TOTAL_DISCS,
   SORT_METHOD_ORIG_DATE,
   SORT_METHOD_BPM,
-  SORT_METHOD_MAX
+  SORT_METHOD_MAX,
+  SORT_METHOD_VIDEO_ORIGINAL_TITLE,
+  SORT_METHOD_VIDEO_ORIGINAL_TITLE_IGNORE_THE
 } SORT_METHOD;
diff --git a/xbmc/filesystem/PluginDirectory.cpp b/xbmc/filesystem/PluginDirectory.cpp
index b703ad80ae5b..b1a344aec4bd 100644
--- a/xbmc/filesystem/PluginDirectory.cpp
+++ b/xbmc/filesystem/PluginDirectory.cpp
@@ -238,6 +238,12 @@ void CPluginDirectory::AddSortMethod(int handle, SORT_METHOD sortMethod, const s
         dir->m_listItems->AddSortMethod(SortBySortTitle, 556, LABEL_MASKS(labelMask, "%M", labelMask, "%M"), CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_FILELISTS_IGNORETHEWHENSORTING) ? SortAttributeIgnoreArticle : SortAttributeNone);
         break;
       }
+	case SORT_METHOD_VIDEO_ORIGINAL_TITLE:
+	case SORT_METHOD_VIDEO_ORIGINAL_TITLE_IGNORE_THE:
+	  {
+        dir->m_listItems->AddSortMethod(SortByOriginalTitle, 556, LABEL_MASKS(labelMask, "%M", labelMask, "%M"), CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_FILELISTS_IGNORETHEWHENSORTING) ? SortAttributeIgnoreArticle : SortAttributeNone);
+        break;
+      }
     case SORT_METHOD_MPAA_RATING:
       {
         dir->m_listItems->AddSortMethod(SortByMPAA, 20074, LABEL_MASKS(labelMask, "%O", labelMask, "%O"));
diff --git a/xbmc/interfaces/legacy/ModuleXbmcplugin.h b/xbmc/interfaces/legacy/ModuleXbmcplugin.h
index f36fe4611629..1aa458cb2941 100644
--- a/xbmc/interfaces/legacy/ModuleXbmcplugin.h
+++ b/xbmc/interfaces/legacy/ModuleXbmcplugin.h
@@ -463,6 +463,8 @@ namespace XBMCAddon
     SWIG_CONSTANT(int, SORT_METHOD_VIDEO_TITLE);
     SWIG_CONSTANT(int, SORT_METHOD_VIDEO_SORT_TITLE);
     SWIG_CONSTANT(int, SORT_METHOD_VIDEO_SORT_TITLE_IGNORE_THE);
+    SWIG_CONSTANT(int, SORT_METHOD_VIDEO_ORIGINAL_TITLE);
+    SWIG_CONSTANT(int, SORT_METHOD_VIDEO_ORIGINAL_TITLE_IGNORE_THE);
     SWIG_CONSTANT(int, SORT_METHOD_PRODUCTIONCODE);
     SWIG_CONSTANT(int, SORT_METHOD_SONG_RATING);
     SWIG_CONSTANT(int, SORT_METHOD_MPAA_RATING);
diff --git a/xbmc/playlists/SmartPlayList.cpp b/xbmc/playlists/SmartPlayList.cpp
index 3fd0034bbdc9..55fc175464fe 100644
--- a/xbmc/playlists/SmartPlayList.cpp
+++ b/xbmc/playlists/SmartPlayList.cpp
@@ -581,6 +581,7 @@ std::vector<SortBy> CSmartPlaylistRule::GetOrders(const std::string &type)
   else if (type == "tvshows")
   {
     orders.push_back(SortBySortTitle);
+    orders.push_back(SortByOriginalTitle);
     orders.push_back(SortByTvShowStatus);
     orders.push_back(SortByVotes);
     orders.push_back(SortByRating);
@@ -599,6 +600,7 @@ std::vector<SortBy> CSmartPlaylistRule::GetOrders(const std::string &type)
   else if (type == "episodes")
   {
     orders.push_back(SortByTitle);
+    orders.push_back(SortByOriginalTitle);
     orders.push_back(SortByTvShowTitle);
     orders.push_back(SortByVotes);
     orders.push_back(SortByRating);
@@ -618,6 +620,7 @@ std::vector<SortBy> CSmartPlaylistRule::GetOrders(const std::string &type)
   else if (type == "movies")
   {
     orders.push_back(SortBySortTitle);
+    orders.push_back(SortByOriginalTitle);
     orders.push_back(SortByVotes);
     orders.push_back(SortByRating);
     orders.push_back(SortByUserRating);
diff --git a/xbmc/utils/SortUtils.cpp b/xbmc/utils/SortUtils.cpp
index 840e69ec06ee..334ce9416bab 100644
--- a/xbmc/utils/SortUtils.cpp
+++ b/xbmc/utils/SortUtils.cpp
@@ -269,6 +269,22 @@ std::string BySortTitle(SortAttribute attributes, const SortItem &values)
   return title;
 }
 
+std::string ByOriginalTitle(SortAttribute attributes, const SortItem& values)
+{
+
+  std::string title = values.at(FieldOriginalTitle).asString();
+  if (title.empty())
+    title = values.at(FieldSortTitle).asString();
+
+  if (title.empty())
+    title = values.at(FieldTitle).asString();
+
+  if (attributes & SortAttributeIgnoreArticle)
+    title = SortUtils::RemoveArticles(title);
+
+  return title;
+}
+
 std::string ByRating(SortAttribute attributes, const SortItem &values)
 {
   return StringUtils::Format("%f %s", values.at(FieldRating).asFloat(), ByLabel(attributes, values).c_str());
@@ -646,6 +662,7 @@ std::map<SortBy, SortUtils::SortPreparator> fillPreparators()
   preparators[SortByTotalDiscs]               = ByTotalDiscs;
   preparators[SortByOrigDate]                 = ByOrigDate;
   preparators[SortByBPM]                      = ByBPM;
+  preparators[SortByOriginalTitle]            = ByOriginalTitle;
 
   return preparators;
 }
@@ -740,6 +757,9 @@ std::map<SortBy, Fields> fillSortingFields()
   sortingFields[SortByOrigDate].insert(FieldAlbum);
   sortingFields[SortByOrigDate].insert(FieldTrackNumber);
   sortingFields[SortByBPM].insert(FieldBPM);
+  sortingFields[SortByOriginalTitle].insert(FieldOriginalTitle);
+  sortingFields[SortByOriginalTitle].insert(FieldTitle);
+  sortingFields[SortByOriginalTitle].insert(FieldSortTitle);
   sortingFields.insert(std::pair<SortBy, Fields>(SortByRandom, Fields()));
 
   return sortingFields;
@@ -1124,6 +1144,8 @@ const sort_map table[] = {
   { SortByUserRating,               SORT_METHOD_VIDEO_USER_RATING,            SortAttributeIgnoreFolders, 38018 },
   { SortBySortTitle,                SORT_METHOD_VIDEO_SORT_TITLE,             SortAttributeIgnoreFolders, 171 },
   { SortBySortTitle,                SORT_METHOD_VIDEO_SORT_TITLE_IGNORE_THE,  (SortAttribute)(SortAttributeIgnoreFolders | SortAttributeIgnoreArticle), 171 },
+  { SortByOriginalTitle,            SORT_METHOD_VIDEO_ORIGINAL_TITLE,         SortAttributeIgnoreFolders, 20376 },
+  { SortByOriginalTitle,            SORT_METHOD_VIDEO_ORIGINAL_TITLE_IGNORE_THE,  (SortAttribute)(SortAttributeIgnoreFolders | SortAttributeIgnoreArticle), 20376 },
   { SortByYear,                     SORT_METHOD_YEAR,                         SortAttributeIgnoreFolders, 562 },
   { SortByProductionCode,           SORT_METHOD_PRODUCTIONCODE,               SortAttributeNone,          20368 },
   { SortByProgramCount,             SORT_METHOD_PROGRAM_COUNT,                SortAttributeNone,          567 }, // label is "play count"
@@ -1296,6 +1318,7 @@ const std::map<std::string, SortBy> sortMethods = {
   { "totaldiscs",       SortByTotalDiscs },
   { "originaldate",     SortByOrigDate },
   { "bpm",              SortByBPM },
+  { "originaltitle",    SortByOriginalTitle },
 };
 
 SortBy SortUtils::SortMethodFromString(const std::string& sortMethod)
diff --git a/xbmc/utils/SortUtils.h b/xbmc/utils/SortUtils.h
index 79629d4f6e5e..859d3eb74c7b 100644
--- a/xbmc/utils/SortUtils.h
+++ b/xbmc/utils/SortUtils.h
@@ -161,6 +161,8 @@ typedef enum {
   SortByOrigDate,
   /// __56__ : Sort by BPM                        <em>(String: <b><c>bpm</c></b>)</em>
   SortByBPM,
+  /// __57__ : Sort by original title             <em>(String: <b><c>OriginalTitle</c></b>)</em>
+  SortByOriginalTitle,
 } SortBy;
 ///@}
 
diff --git a/xbmc/video/GUIViewStateVideo.cpp b/xbmc/video/GUIViewStateVideo.cpp
index ca64394fc87f..2b968b7e27d8 100644
--- a/xbmc/video/GUIViewStateVideo.cpp
+++ b/xbmc/video/GUIViewStateVideo.cpp
@@ -127,6 +127,7 @@ CGUIViewStateWindowVideoNav::CGUIViewStateWindowVideoNav(const CFileItemList& it
     case NODE_TYPE_INPROGRESS_TVSHOWS:
       {
         AddSortMethod(SortBySortTitle, sortAttributes, 556, LABEL_MASKS("%T", "%M", "%T", "%M"));  // Title, #Episodes | Title, #Episodes
+        AddSortMethod(SortByOriginalTitle, sortAttributes, 20376, LABEL_MASKS("%T", "%M", "%T", "%M"));  // Title, #Episodes | Title, #Episodes
 
         AddSortMethod(SortByNumberOfEpisodes, 20360, LABEL_MASKS("%L", "%M", "%L", "%M"));  // Label, #Episodes | Label, #Episodes
         AddSortMethod(SortByLastPlayed, 568, LABEL_MASKS("%T", "%p", "%T", "%p"));  // Title, #Last played | Title, #Last played
@@ -228,10 +229,12 @@ CGUIViewStateWindowVideoNav::CGUIViewStateWindowVideoNav(const CFileItemList& it
         {
           AddSortMethod(SortByYear, 562, LABEL_MASKS("%T", "%Y"));  // Title, Year | empty, empty
           AddSortMethod(SortBySortTitle, sortAttributes, 556, LABEL_MASKS("%T", "%R"));  // Title, Rating | empty, empty
+          AddSortMethod(SortByOriginalTitle, sortAttributes, 20376, LABEL_MASKS("%T", "%R"));  // Title, Rating | empty, empty
         }
         else
         {
           AddSortMethod(SortBySortTitle, sortAttributes, 556, LABEL_MASKS("%T", "%R", "%T", "%R"));  // Title, Rating | Title, Rating
+          AddSortMethod(SortByOriginalTitle, sortAttributes, 20376, LABEL_MASKS("%T", "%R", "%T", "%R"));  // Title, Rating | Title, Rating
           AddSortMethod(SortByYear, 562, LABEL_MASKS("%T", "%Y", "%T", "%Y"));  // Title, Year | Title, Year
         }
         AddSortMethod(SortByRating, 563, LABEL_MASKS("%T", "%R", "%T", "%R"));  // Title, Rating | Title, Rating
@@ -438,6 +441,8 @@ CGUIViewStateVideoMovies::CGUIViewStateVideoMovies(const CFileItemList& items) :
 {
   AddSortMethod(SortBySortTitle, 556, LABEL_MASKS("%T", "%R", "%T", "%R"),  // Title, Rating | Title, Rating
     CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_FILELISTS_IGNORETHEWHENSORTING) ? SortAttributeIgnoreArticle : SortAttributeNone);
+  AddSortMethod(SortByOriginalTitle, 20376, LABEL_MASKS("%T", "%R", "%T", "%R"),  // Title, Rating | Title, Rating
+    CServiceBroker::GetSettingsComponent()->GetSettings()->GetBool(CSettings::SETTING_FILELISTS_IGNORETHEWHENSORTING) ? SortAttributeIgnoreArticle : SortAttributeNone);
   AddSortMethod(SortByYear, 562, LABEL_MASKS("%T", "%Y", "%T", "%Y"));  // Title, Year | Title, Year
   AddSortMethod(SortByRating, 563, LABEL_MASKS("%T", "%R", "%T", "%R"));  // Title, Rating | Title, Rating
   AddSortMethod(SortByUserRating, 38018, LABEL_MASKS("%T", "%r", "%T", "%r"));  // Title, Userrating | Title, Userrating
diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index f4d0ceb5ae73..354c00a5ffcc 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -7264,7 +7264,8 @@ bool CVideoDatabase::GetSortedVideos(const MediaType &mediaType, const std::stri
       sortDescription.sortBy == SortByUserRating ||
       sortDescription.sortBy == SortByYear ||
       sortDescription.sortBy == SortByLastPlayed ||
-      sortDescription.sortBy == SortByPlaycount)
+      sortDescription.sortBy == SortByPlaycount ||
+      sortDescription.sortBy == SortByOriginalTitle)
     sorting.sortAttributes = (SortAttribute)(sortDescription.sortAttributes | SortAttributeIgnoreFolders);
 
   bool success = false;
diff --git a/xbmc/video/VideoInfoTag.cpp b/xbmc/video/VideoInfoTag.cpp
index 536edc30655d..99dc7156a544 100644
--- a/xbmc/video/VideoInfoTag.cpp
+++ b/xbmc/video/VideoInfoTag.cpp
@@ -821,6 +821,16 @@ void CVideoInfoTag::ToSortable(SortItem& sortable, Field field) const
       sortable[FieldSortTitle] = m_strSortTitle;
     break;
   }
+  case FieldOriginalTitle:
+  {
+    // seasons with a custom name/title need special handling as they should be sorted by season number
+    if (m_type == MediaTypeSeason && !m_strOriginalTitle.empty())
+      sortable[FieldOriginalTitle] =
+          StringUtils::Format(g_localizeStrings.Get(20358).c_str(), m_iSeason);
+    else
+      sortable[FieldOriginalTitle] = m_strOriginalTitle;
+    break;
+  }
   case FieldTvShowStatus:             sortable[FieldTvShowStatus] = m_strStatus; break;
   case FieldProductionCode:           sortable[FieldProductionCode] = m_strProductionCode; break;
   case FieldAirDate:                  sortable[FieldAirDate] = m_firstAired.IsValid() ? m_firstAired.GetAsDBDate() : (m_premiered.IsValid() ? m_premiered.GetAsDBDate() : StringUtils::Empty); break;
